import pygame
import sys
import random
import time

TILE_SIZE = 30
SCREEN_COLOR = (0, 0, 0)
PLAYER_COLOR = (255, 105, 180)
TILE_COLOR = (255, 182, 193)
POINT_COLOR = (255, 215, 0)
FONT_COLOR = (255, 255, 255)
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600

MAX_LEVEL = 7
class Player:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.score = 0
        self.lives = 3


    def move(self, dx, dy, game_map):
        new_x = self.x + dx
        new_y = self.y + dy
        if (
            0 <= new_x < game_map.size
            and 0 <= new_y < game_map.size
            and game_map.grid[new_y][new_x] != 2    
        ):
            self.x = new_x
            self.y = new_y

    def draw(self, screen):
        pygame.draw.rect(
            screen,
            PLAYER_COLOR,
            (self.x * TILE_SIZE, self.y * TILE_SIZE, TILE_SIZE, TILE_SIZE)
        )

class Ghost:
    def __init__(self, x, y, image_file="duch.png"):
        self.x = x
        self.y = y
        self.image = pygame.image.load(image_file).convert_alpha()
        self.image = pygame.transform.scale(self.image, (TILE_SIZE, TILE_SIZE))
        self.last_move_time = time.time()
    
    def move_towards_player(self, player, map_size):
        now = time.time()
        if now - self.last_move_time < 0.5:
            return  

        self.last_move_time = now  

        dx = player.x - self.x
        dy = player.y - self.y
        distance = abs(dx) + abs(dy)

        if distance <= 3 or random.random() < 0.2:
         
            if abs(dx) > abs(dy):
                step_x = 1 if dx > 0 else -1
                new_x = self.x + step_x
                if 0 <= new_x < map_size:
                    self.x = new_x
            elif dy != 0:
                step_y = 1 if dy > 0 else -1
                new_y = self.y + step_y
                if 0 <= new_y < map_size:
                    self.y = new_y
        else:
            
            directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
            random.shuffle(directions)
            for dx, dy in directions:
                new_x = self.x + dx
                new_y = self.y + dy
                if 0 <= new_x < map_size and 0 <= new_y < map_size:
                    self.x = new_x
                    self.y = new_y
                    break

    def draw(self, screen, offset_x, offset_y):
        screen.blit(
            self.image,
            (
                offset_x + self.x * TILE_SIZE,
                offset_y + self.y * TILE_SIZE
            )
        )

class Map:
  
    def __init__(self, level):
        self.size = 2 * (3 + level - 1) + 1        
        self.grid = [[2] * self.size for _ in range(self.size)]
        self._generate_maze_dfs()
        self._place_points()
        
    def _generate_maze_dfs(self):
        stack = []
        start = (1, 1)                
        self.grid[start[1]][start[0]] = 0
        stack.append(start)
        

        dirs = [(-2, 0), (2, 0), (0, -2), (0, 2)]

        while stack:
            x, y = stack[-1]
            random.shuffle(dirs)
            carved = False

            for dx, dy in dirs:
                nx, ny = x + dx, y + dy
                if 1 <= nx < self.size-1 and 1 <= ny < self.size-1 and self.grid[ny][nx] == 2:
                    self.grid[y + dy//2][x + dx//2] = 0
                    self.grid[ny][nx] = 0
                    stack.append((nx, ny))
                    carved = True
                    break
            
            if not carved:
                stack.pop()
        self.add_extra_passages(count=int(self.size))
    
    def _place_points(self):
        mid = self.size // 2
        for y in range(self.size):
            for x in range(self.size):
            
                if self.grid[y][x] == 0 and not (x == mid and y == mid):
                    self.grid[y][x] = 1
    def add_extra_passages(self, count):
        for _ in range(count):
            x = random.randint(1, self.size - 2)
            y = random.randint(1, self.size - 2)
            if self.grid[y][x] == 2: 
                neighbors = [(y-1,x), (y+1,x), (y,x-1), (y,x+1)]
                passage_neighbors = [n for n in neighbors if self.grid[n[0]][n[1]] == 0]
                if len(passage_neighbors) >= 2:  
                    self.grid[y][x] = 0  
                    
    
    def draw(self, screen):
        for y, row in enumerate(self.grid):
            for x, tile in enumerate(row):
                if tile == 1:                 
                    color = (255, 215, 0)
                elif tile == 2:              
                    color = (90, 90, 90)
                else:                        
                    color = (255, 182, 193)
                pygame.draw.rect(
                    screen,
                    color,
                    pygame.Rect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE)
                )
            
class Game:
    def __init__(self):
        pygame.init()
        self.level = 1
        self.map = Map(self.level)
        self.player = Player(self.map.size // 2, self.map.size // 2)
        self.screen = pygame.display.set_mode((self.map.size * TILE_SIZE, self.map.size * TILE_SIZE))
        pygame.display.set_caption("PacWoman OOP")
        pygame.key.set_repeat(200, 100)
        self.clock = pygame.time.Clock()
        self.font = pygame.font.SysFont(None, 30)
        self.running = True
        self.game_over = False
        self.create_ghosts_for_level()
        
    def create_ghosts_for_level(self):
        self.ghosts = []
        
        self.ghosts.append(Ghost(self.map.size - 1, self.map.size - 1))
        
        if self.level >= 3:
            self.ghosts.append(Ghost(0, 0, "duch1.png"))
        
        if self.level >= 5:
            self.ghosts.append(Ghost(self.map.size - 1, 0, "duch2.png"))


    def next_level(self):
        self.level += 1
        if self.level > MAX_LEVEL:
            self.game_over = True
            return
        self.map = Map(self.level)
        self.player.x = self.map.size // 2
        self.player.y = self.map.size // 2
        self.screen = pygame.display.set_mode((self.map.size * TILE_SIZE, self.map.size * TILE_SIZE))
        self.create_ghosts_for_level()

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False

            if not self.game_over and event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    self.next_level()
                elif event.key == pygame.K_UP:
                    self.player.move(0, -1, self.map.size)
                elif event.key == pygame.K_DOWN:
                    self.player.move(0, 1, self.map.size)
                elif event.key == pygame.K_LEFT:
                    self.player.move(-1, 0, self.map.size)
                elif event.key == pygame.K_RIGHT:
                    self.player.move(1, 0, self.map.size)

    def update_game(self):
        if self.game_over:
            return
        tile = self.map.grid[self.player.y][self.player.x]
        if tile == 1:
            self.player.score += 1
            self.map.grid[self.player.y][self.player.x] = 0
        if all(tile != 1 for row in self.map.grid for tile in row):
            pygame.time.delay(500) 
            self.next_level()
        for ghost in self.ghosts:
            ghost.move_towards_player(self.player, self.map.size) 

            if ghost.x == self.player.x and ghost.y == self.player.y:
                self.game_over = True
    
    def draw_ui(self):
        score_text = self.font.render(
            f"Punkty: {self.player.score}  Å»ycia: {self.player.lives}  Poziom: {self.level}",
            True, FONT_COLOR
        )
        self.screen.blit(score_text, (10, 10))

    def draw_game_over(self):
        text = self.font.render("WYGRANA!!!", True, (255, 105, 180))
        self.screen.fill((0, 0, 0))
        text_rect = text.get_rect(center=(WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2))
        self.screen.blit(text, text_rect)

    def run(self):
        while self.running:
            self.handle_events()
            self.update_game()

            self.screen.fill(SCREEN_COLOR)
            if self.game_over:
                self.draw_game_over()
            else:
                self.map.draw(self.screen)
                self.player.draw(self.screen)
                self.draw_ui()

            pygame.display.flip()
            self.clock.tick(60)

        pygame.quit()
        sys.exit()

if __name__ == "__main__":
    game = Game()
    game.run()
