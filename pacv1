
import pygame
import sys
import random
import time
from collections import deque
import os

TILE_SIZE = 30
SCREEN_COLOR = (0, 0, 0)
PLAYER_COLOR = (255, 105, 180)
TILE_COLOR = (255, 182, 193)
POINT_COLOR = (255, 215, 0)
FONT_COLOR = (255, 255, 255)
WALL_COLOR = (255, 20, 0)
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600
MAX_LEVEL = 7

class Tile:
    def __init__(self):
        self.wall_top = True
        self.wall_bottom = True
        self.wall_left = True
        self.wall_right = True
        self.point = False

class Player:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.score = 0
        self.lives = 3

    def move(self, dx, dy, map_obj):
        new_x = self.x + dx
        new_y = self.y + dy
        if 0 <= new_x < map_obj.size and 0 <= new_y < map_obj.size:
            current = map_obj.grid[self.y][self.x]
            target  = map_obj.grid[new_y][new_x]
            if dx == -1 and (current.wall_left or target.wall_right): return
            if dx ==  1 and (current.wall_right or target.wall_left): return
            if dy == -1 and (current.wall_top or target.wall_bottom): return
            if dy ==  1 and (current.wall_bottom or target.wall_top): return
            self.x, self.y = new_x, new_y

    def draw(self, screen, ox, oy):
        pygame.draw.rect(screen, PLAYER_COLOR,
                         (ox + self.x*TILE_SIZE, oy + self.y*TILE_SIZE,
                          TILE_SIZE, TILE_SIZE))

class Ghost:
    def __init__(self, x, y, image_file="duch.png"):
        self.x = x
        self.y = y
        self.image = pygame.image.load(image_file).convert_alpha()
        self.image = pygame.transform.scale(self.image, (TILE_SIZE, TILE_SIZE))
        self.last_move = time.time()

    def move_towards(self, player, map_obj):
        if time.time() - self.last_move < 0.5:
            return
        self.last_move = time.time()
        dx = player.x - self.x
        dy = player.y - self.y
        dist = abs(dx) + abs(dy)
        def can(nx, ny):
            if not (0 <= nx < map_obj.size and 0 <= ny < map_obj.size):
                return False
            c = map_obj.grid[self.y][self.x]
            t = map_obj.grid[ny][nx]
            if nx > self.x and (c.wall_right or t.wall_left): return False
            if nx < self.x and (c.wall_left  or t.wall_right): return False
            if ny > self.y and (c.wall_bottom or t.wall_top): return False
            if ny < self.y and (c.wall_top   or t.wall_bottom): return False
            return True

        if dist <= 3 or random.random() < 0.2:
            if abs(dx) > abs(dy):
                nx = self.x + (1 if dx>0 else -1)
                if can(nx, self.y):
                    self.x = nx; return
            if dy != 0:
                ny = self.y + (1 if dy>0 else -1)
                if can(self.x, ny):
                    self.y = ny; return

        dirs = [(1,0),(-1,0),(0,1),(0,-1)]
        random.shuffle(dirs)
        for dx_,dy_ in dirs:
            nx, ny = self.x+dx_, self.y+dy_
            if can(nx, ny):
                self.x, self.y = nx, ny
                break

    def draw(self, screen, ox, oy):
        screen.blit(self.image, (ox + self.x*TILE_SIZE, oy + self.y*TILE_SIZE))

class Map:
    def __init__(self, level):
        self.level = level
        self.size = 5 + level - 1
        self.grid = [[Tile() for _ in range(self.size)] for _ in range(self.size)]
        self._gen_maze()
        self._add_extra_passages(extra=self.level + 3)
        self._break_long_walls(max_len=3)  # <-- NOWA LINIA
        self._place_points()
        self._mark_accessible()

    def _gen_maze(self):
        size = self.size
        for y in range(size):
            for x in range(size):
                t = self.grid[y][x]
                t.wall_top = t.wall_bottom = t.wall_left = t.wall_right = True

        dirs = [('top',0,-1,'bottom'),('bottom',0,1,'top'),
                ('left',-1,0,'right'),('right',1,0,'left')]
        visited = [[False]*size for _ in range(size)]

        def dfs(x, y):
            visited[y][x] = True
            dir_order = dirs[:]
            random.shuffle(dir_order)
            for w, dx, dy, ow in dir_order:
                steps = random.randint(1, 3)
                cx, cy = x, y
                for _ in range(steps):
                    nx, ny = cx + dx, cy + dy
                    if 0 <= nx < size and 0 <= ny < size and not visited[ny][nx]:
                        setattr(self.grid[cy][cx], f'wall_{w}', False)
                        setattr(self.grid[ny][nx], f'wall_{ow}', False)
                        visited[ny][nx] = True
                        dfs(nx, ny)
                        break
                    else:
                        break

        dfs(self.size // 2, self.size // 2)

    def _add_extra_passages(self, extra=5):
        count = 0
        size = self.size
        while count < extra:
            x = random.randint(0, size-2)
            y = random.randint(0, size-2)
            t1 = self.grid[y][x]
            if random.choice([True, False]):
                t2 = self.grid[y][x+1]
                if t1.wall_right and t2.wall_left:
                    t1.wall_right = False
                    t2.wall_left = False
                    count += 1
            else:
                t2 = self.grid[y+1][x]
                if t1.wall_bottom and t2.wall_top:
                    t1.wall_bottom = False
                    t2.wall_top = False
                    count += 1

    def _break_long_walls(self, max_len=3):
        
        for y in range(self.size):
            count = 0
            for x in range(self.size - 1):
                if self.grid[y][x].wall_right and self.grid[y][x+1].wall_left:
                    count += 1
                    if count >= max_len:
                        self.grid[y][x].wall_right = False
                        self.grid[y][x+1].wall_left = False
                        count = 0
                else:
                    count = 0
        
        for x in range(self.size):
            count = 0
            for y in range(self.size - 1):
                if self.grid[y][x].wall_bottom and self.grid[y+1][x].wall_top:
                    count += 1
                    if count >= max_len:
                        self.grid[y][x].wall_bottom = False
                        self.grid[y+1][x].wall_top = False
                        count = 0
                else:
                    count = 0

class Game:
    def calculate_offset(self):
        ms = self.map.size * TILE_SIZE
        self.ox = (WINDOW_WIDTH  - ms)//2
        self.oy = (WINDOW_HEIGHT - ms)//2

    def __init__(self):
        pygame.init()
        self.level = 1
        self.map = Map(self.level)
        self.screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
        self.calculate_offset()
        cx, cy = self.map.size//2, self.map.size//2
        self.ghosts = [Ghost(cx, cy)]
        self.player = Player(cx, min(cy+2, self.map.size-1))
        self._add_extra_ghosts()
        pygame.display.set_caption("PacWoman OOP")
        self.clock = pygame.time.Clock()
        self.font  = pygame.font.SysFont(None,30)
        self.running = True
        self.game_over = False
        self.time_game_over = 0
        try:
            pygame.mixer.music.load("background_music.mp3")
            pygame.mixer.music.play(-1)
        except:
            print("Nie udało się załadować muzyki.")

    def _add_extra_ghosts(self):
        if self.level >=3:
            self.ghosts.append(Ghost(0,0,"duch1.png"))
        if self.level >=5:
            self.ghosts.append(Ghost(self.map.size-1,0,"duch2.png"))

    def next_level(self):
        try:
            pygame.mixer.Sound("level_up.mp3").play()
        except: pass
        self.level += 1
        if self.level > MAX_LEVEL:
            try:
                pygame.mixer.Sound("victory.mp3").play()
            except: pass
            self.game_over = True
            return
        self.map = Map(self.level)
        self.calculate_offset()
        cx, cy = self.map.size // 2, self.map.size // 2
        self.ghosts = [Ghost(cx, cy)]
        self.player.x, self.player.y = cx, min(cy + 2, self.map.size - 1)
        self._add_extra_ghosts()

    def handle_events(self):
        for e in pygame.event.get():
            if e.type == pygame.QUIT:
                self.running = False
            if not self.game_over and e.type == pygame.KEYDOWN:
                if e.key == pygame.K_SPACE:
                    self.next_level()
                elif e.key == pygame.K_UP:
                    self.player.move(0, -1, self.map)
                elif e.key == pygame.K_DOWN:
                    self.player.move(0, 1, self.map)
                elif e.key == pygame.K_LEFT:
                    self.player.move(-1, 0, self.map)
                elif e.key == pygame.K_RIGHT:
                    self.player.move(1, 0, self.map)

    def update(self):
        if self.game_over:
            return
        tile = self.map.grid[self.player.y][self.player.x]
        if tile.point:
            self.player.score += 1
            tile.point = False
        if not any(tile.point for row in self.map.grid for tile in row):
            self.next_level()
        for g in self.ghosts:
            g.move_towards(self.player, self.map)
            if g.x == self.player.x and g.y == self.player.y:
                try:
                    pygame.mixer.Sound("ouch.mp3").play()
                except: pass
                self.player.lives -= 1
                if self.player.lives <= 0:
                    try:
                        s = pygame.mixer.Sound("game_over.mp3")
                        s.set_volume(0.3)
                        s.play()
                    except: pass
                    self.game_over = True
                    self.time_game_over = time.time()
                else:
                    cx, cy = self.map.size//2, min(self.map.size // 2 + 2, self.map.size - 1)
                    self.player.x, self.player.y = cx, cy

    def draw_ui(self):
        txt = self.font.render(f"Punkty: {self.player.score}  Życia: {self.player.lives}  Poziom: {self.level}", True, FONT_COLOR)
        self.screen.blit(txt, (10, 10))

    def run(self):
        while self.running:
            self.handle_events()
            self.update()
            self.screen.fill(SCREEN_COLOR)
            if self.game_over and self.level >= MAX_LEVEL and self.player.lives > 0:
                go = self.font.render("ZWYCIĘSTWO!", True, (0, 255, 0))
                self.screen.blit(go, ((WINDOW_WIDTH - go.get_width()) // 2, (WINDOW_HEIGHT - go.get_height()) // 2))
            elif self.game_over:
                go = self.font.render("KONIEC GRY!", True, (255, 50, 50))
                self.screen.blit(go, ((WINDOW_WIDTH - go.get_width()) // 2, (WINDOW_HEIGHT - go.get_height()) // 2))
            else:
                self.map.draw(self.screen, self.ox, self.oy)
                for g in self.ghosts:
                    g.draw(self.screen, self.ox, self.oy)
                self.player.draw(self.screen, self.ox, self.oy)
                self.draw_ui()
            pygame.display.flip()
            if self.game_over and self.time_game_over:
                if time.time() - self.time_game_over > 10:
                    pygame.mixer.music.stop()
                    self.running = False
            self.clock.tick(60)
        pygame.quit()
        sys.exit()

if __name__ == "__main__":
    Game().run()
